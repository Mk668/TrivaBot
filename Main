# bot.py
import os
from os import path
import random
import time
import asyncio
import discord
import random
import csv
from csv import reader
from dotenv import load_dotenv
from discord.ext.commands import Bot
from discord.ext import commands
#edit
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')

client = discord.Client()
bot = commands.Bot(command_prefix='$')

@bot.command(pass_context=True)
async def test(ctx):
    await ctx.send('test')


@bot.command(pass_context=True)
@commands.has_permissions(administrator=True)
async def whoami(ctx):
    msg = "You're an admin {}".format(ctx.message.author.mention)
    await ctx.send(msg)

@bot.command(pass_context=True)
@commands.has_permissions(administrator=True)
async def spam(ctx, *args):
    i = 0
    while (i < 20):
        i += 1
        await ctx.send(' '.join(args))

@bot.command(pass_context=True)
async def randomMember(ctx):
    for guild in bot.guilds:
        if guild.name == GUILD:
            break
    members = []
    for member in guild.members:
        members.append(member)
    await ctx.send(random.choice(members))


@bot.command(pass_context=True)
async def quizme(ctx):
    #quizme
    offset = random.randrange(172967)
    print(offset)
    f = open('quiz.csv')
    f.seek(offset)  # go to random position
    try:
        f.readline()  # discard - bound to be partial line
        random_line = f.readline()
    except:
        if len(random_line) == 0:  # we have hit the end
            f.seek(0)
            random_line = f.readline()
    print(random_line)
    question, answer = random_line.split("?")
    f.close()
    answer = answer[1:]
    answer = answer.rstrip('\n')
    await ctx.send(question)
    print("!"+answer.lower()+"!")
    def check(m):
        print('checking')
        if m.author == bot.user:
            print("Is bot")
            return False
        else:
            print("Is user")
            return True
    time.sleep(2)
    msg = await bot.wait_for('message', check=check)
    print("Message was: " + msg.content)
    if(msg.content.lower() == answer.lower()):
        await ctx.channel.send("Correct! +10 points")
        await addpoints(msg)
    else:
        await ctx.channel.send("WRONG! Correct answer is: " + answer.lower())
        # Give player 10 points


async def addpoints(msg):
    print('Applying points')
    with open('data_'+str(msg.guild.id)+'.csv', 'r') as read_obj:
        # pass the file object to reader() to get the reader object
        csv_reader = reader(read_obj)
        # Pass reader object to list() to get a list of lists
        list_of_rows = list(csv_reader)
        print(list_of_rows)
        playerinlist = False
        for item in list_of_rows:
            if item[0] == str(msg.author.id):
                playerinlist = True
                print("user found")
                print("score is: " + item[2])
                scorestr = item[2].rstrip('\n')
                score = int(scorestr)
                score += 10
                item[2] = str(score)
                print("score is now: " + item[2])
        if playerinlist == False:
            print("did not find player, adding new row")
            playerList = [msg.author.id,msg.author.name,10]
            list_of_rows.append(playerList)
        writer = csv.writer(open('data_'+str(msg.guild.id)+'.csv', 'w'))
        writer.writerows(list_of_rows)
        read_obj.close()


@bot.command(pass_context=True)
async def score(ctx):
    with open('data_'+str(ctx.guild.id)+'.csv', 'r') as read_obj:
        # pass the file object to reader() to get the reader object
        csv_reader = reader(read_obj)
        # Pass reader object to list() to get a list of lists
        list_of_rows = list(csv_reader)
        list_to_send = ""
        for line in list_of_rows:
            name = line[1]
            score = line[2]
            list_to_send += name + ": " + str(score) + "\n"
        await ctx.send(list_to_send)
        read_obj.close()


@bot.command(pass_context=True)
async def randomMemberRole(ctx,text):
    for guild in bot.guilds:
        if guild.name == GUILD:
            break
    members = []
    for role in guild.roles:
        if role.name == text:
            for guild in bot.guilds:
                for member in guild.members:
                    if role in member.roles:
                        members.append(member)
            break
    await ctx.send(random.choice(members))


spacer = -1
@bot.event
async def on_ready():
    #Check connection to discord, pull guilds
    print(f'{bot.user} has connected to Discord!')
    connectedguilds = []
    for guild in bot.guilds:
        connectedguilds.append(guild)

    for guild in connectedguilds:
        print(
        f'{bot.user} is connected to the following guild:\n'
        f'{guild.name}(id: {guild.id})'
    )

    members = '\n - '.join([member.name for member in guild.members])
    roles = '\n - '.join([role.name + " " + str(role.id) for role in guild.roles])
    if path.exists('data_'+str(guild.id)+'.csv')== False:
        with open('data_'+str(guild.id)+'.csv', mode='w') as data:
            datawriter = csv.writer(data, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            datawriter.writerow(['ID', 'Name', 'Score'])
            print("csv created")

    else:
        print('data file already exists')

async def spongebobmock(message):
    if message.author.name == '*****':
        a = list(message.content)
        a[2::3] = [x.upper() for x in a[2::3]]
        a[1::2] = [x.lower() for x in a[1::2]]
        s = ''.join(a)
        await message.channel.send(s)
        await message.channel.send(file=discord.File('mockingspongebobbb.jpg'))





async def messageResponses(message):
    if message.author == bot.user:
        return
    messages = ['your mom','joe','@everyone', 'trash bot']
    response = ['Hahaha, so funny xd', 'JOE MOMMA', 'You are being annoyinng', "That's not very nice, I'm hurt :("]
    i = -1
    for item in messages:
        i += 1
        if item in message.content.lower():
            await message.channel.send(response[i])


@bot.event
async def on_message(message):
    print(message.author.name + ": " + message.content)
    await messageResponses(message)
    await bot.process_commands(message)








bot.run(TOKEN)
